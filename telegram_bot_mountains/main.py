import os
from logging import getLogger
from urllib.parse import unquote
import logging
import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from database.postgres_VR2 import Database
from dotenv import load_dotenv
from aiogram.enums import ParseMode
from urllib.parse import unquote
import qrcode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from handlers import news_handlers # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from urllib.parse import unquote, quote_plus 


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM (Finite State Machine)
class SearchStates(StatesGroup):
    waiting_for_post_keyword = State()
    waiting_for_news_keyword = State() # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π

class TelegramBot:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.db = None
        self.setup_database()

    @staticmethod
    def generate_qr(post_data: dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞ —Å –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞"""
        # post_data['qr_id'] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –ø–æ—Å—Ç–∞ –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        # –ü–∞—Ä–∞–º–µ—Ç—Ä 'start' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ qr_data = "mountain:p0001", —Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç "mountain%3Ap0001"
        qr_content_data = f"mountain:{post_data['qr_id']}"
        encoded_qr_data = quote_plus(qr_content_data) # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ quote_plus –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤ –∫–∞–∫ '+'

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º 'start'
        # –ó–∞–º–µ–Ω–∏—Ç–µ 'YourBotUsername' –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –±–µ–∑ '@'
        bot_username = os.getenv('BOT_USERNAME') # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å BOT_USERNAME –≤ .env
        if not bot_username:
            logger.error("BOT_USERNAME –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. QR-—Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã.")
            # –í–µ—Ä–Ω—É—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –∏–ª–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É
            bot_username = "your_bot_username_placeholder" 

        full_qr_link = f"https://t.me/{bot_username}?start={encoded_qr_data}"

        qr = qrcode.QRCode(version=1, box_size=10, border=4)
        qr.add_data(full_qr_link) # –¢–µ–ø–µ—Ä—å QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
        qr.make()
        img = qr.make_image(fill_color="black", back_color="white")
        filename = f"qr_{post_data['qr_id']}.png"
        img.save(filename)
        logger.info(f"QR-–∫–æ–¥ –¥–ª—è '{post_data['qr_id']}' —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {full_qr_link}")
        return filename, full_qr_link
        
    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        db_config = {
            'user': os.getenv('DB_USER', 'postgres'),
            'password': os.getenv('DB_PASSWORD'),
            'database': os.getenv('DB_NAME', 'vershinyrossii2'),
            'host': os.getenv('DB_HOST', '127.0.0.1'),
            'port': int(os.getenv('DB_PORT', 5433)),
        }
    
        try:
            self.db = Database(**db_config)
            await self.db.connect()
            await self.check_connection()
            await self.init_tables()
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î: {e}")
            raise
        
    async def check_connection(self):
        try:
            async with self.db.pool.acquire() as conn:
                version = await conn.fetchval("SELECT version()")
                logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: {version}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
    async def init_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.db.pool.acquire() as conn:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS posts (
                        id SERIAL PRIMARY KEY,
                        qr_id VARCHAR(50) UNIQUE NOT NULL,
                        title VARCHAR(255) NOT NULL,
                        description TEXT NOT NULL,
                        image_url VARCHAR(255) NOT NULL,
                        content_url VARCHAR(255),
                        is_active BOOLEAN DEFAULT TRUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS news (
                        id SERIAL PRIMARY KEY,
                        link TEXT NOT NULL,
                        news_type TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        title TEXT -- –î–æ–±–∞–≤–∏–ª –ø–æ–ª–µ title –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS user_interactions (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT NOT NULL,
                        username VARCHAR(255),
                        first_name VARCHAR(255),
                        last_name VARCHAR(255),
                        qr_id VARCHAR(50),
                        post_id INTEGER REFERENCES posts(id),
                        interaction_type VARCHAR(50) NOT NULL, -- 'qr_scan', 'post_view', 'search'
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
            
            logger.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise
        
    async def add_sample_post(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
        async with self.db.pool.acquire() as conn:
            await conn.execute('''
                INSERT INTO posts (qr_id, title, description, image_url)
                VALUES ($1, $2, $3, $4)
            ''', 
            "p0001", 
            "–ì–æ—Ä–∞ –≠–ª—å–±—Ä—É—Å", 
            "–í—ã—Å–æ—á–∞–π—à–∞—è –≤–µ—Ä—à–∏–Ω–∞ –†–æ—Å—Å–∏–∏ –∏ –ï–≤—Ä–æ–ø—ã (5642 –º)", 
            "https://example.com/elbrus.jpg")
            logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

    async def handle_qr_url(self, message: types.Message, qr_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ QR-–∫–æ–¥–∞"""
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ QR –¥–∞–Ω–Ω—ã—Ö: {qr_data}")
            
            if qr_data.startswith('mountain:'):
                qr_id = qr_data.split(':', 1)[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º maxsplit=1 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                post = await self.get_post_by_qr_id(qr_id)
            
                if post:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await self.log_user_interaction(
                        message.from_user, 
                        'qr_scan', 
                        qr_id=qr_id, 
                        post_id=post['id']
                    )
                    
                    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ QR-–∫–æ–¥–∞
                    welcome_msg = (
                        f"üèîÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                        f"–í—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ QR-–∫–æ–¥ –∏ –ø–æ–ø–∞–ª–∏ –≤ –Ω–∞—à –±–æ—Ç!\n"
                        f"üìç –°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ: <b>{post['title']}</b>\n\n"
                        f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–±–∏—Ç–µ–ª–µ–π –≥–æ—Ä –†–æ—Å—Å–∏–∏! üëá"
                    )
                    
                    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –∫–∞–Ω–∞–ª
                    welcome_markup = types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [
                                types.InlineKeyboardButton(
                                    text="üí¨ –û–±—â–∏–π —á–∞—Ç", 
                                    url="https://t.me/topofrussia"
                                ),
                                types.InlineKeyboardButton(
                                    text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", 
                                    url="https://t.me/TopRussiaBrand"
                                )
                            ]
                        ]
                    )
                    
                    await message.answer(welcome_msg, reply_markup=welcome_markup, parse_mode=ParseMode.HTML)
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                    await asyncio.sleep(1)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç
                    await self.show_post(message, post)
                else:
                    await message.answer(
                        "üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É QR-–∫–æ–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.",
                        reply_markup=types.InlineKeyboardMarkup(
                            inline_keyboard=[
                                [types.InlineKeyboardButton(
                                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                                    callback_data="main_menu"
                                )]
                            ]
                        )
                    )
            else:
                await message.answer(
                    "üîç –≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–∞—Ö –†–æ—Å—Å–∏–∏.",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(
                                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                                callback_data="main_menu"
                            )]
                        ]
                    )
                )
            
        except Exception as e:
            logger.error(f"QR Error: {e}")
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )]
                    ]
                )
            )

    async def log_user_interaction(self, user, interaction_type, qr_id=None, post_id=None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.db.pool.acquire() as conn:
                await conn.execute('''
                    INSERT INTO user_interactions 
                    (user_id, username, first_name, last_name, qr_id, post_id, interaction_type)
                    VALUES ($1, $2, $3, $4, $5, $6, $7)
                ''', 
                user.id, 
                user.username, 
                user.first_name, 
                user.last_name, 
                qr_id, 
                post_id, 
                interaction_type)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
            
    async def get_post_by_qr_id(self, qr_id: str):
        async with self.db.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM posts WHERE qr_id = $1 AND is_active = TRUE", 
                qr_id
            )

    async def get_all_news(self, limit=20):
        try:
            async with self.db.pool.acquire() as conn:
                return await conn.fetch("SELECT * FROM news ORDER BY id LIMIT $1;", limit)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []

    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π QR-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        args = message.text.split()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä start (–æ—Ç QR-–∫–æ–¥–∞)
        if len(args) > 1:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start
            qr_url = unquote(args[1])
            await self.handle_qr_url(message, qr_url)
        else:
            # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ QR-–∫–æ–¥–∞
            msg = (
                "üèîÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç \"–í–µ—Ä—à–∏–Ω—ã –†–æ—Å—Å–∏–∏\"!\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≥–æ—Ä–∞—Ö –†–æ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥—ã "
                "–∏ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è—Ö.\n\n"
                "üîç <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
                "‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —Ä—è–¥–æ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                "‚Ä¢ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É\n\n"
                "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/news - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
                "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
                "/qr [id] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –¥–ª—è –ø–æ—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
            )
            
            markup = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üí¨ –û–±—â–∏–π —á–∞—Ç", 
                            url="https://t.me/topofrussia"
                        ),
                        types.InlineKeyboardButton(
                            text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", 
                            url="https://t.me/TopRussiaBrand"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
                            callback_data="search_posts"
                        )
                    ]
                ]
            )
            
            await message.answer(msg, reply_markup=markup, parse_mode=ParseMode.HTML)

    async def get_post_by_id(self, item_id: str):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID"""
        async with self.db.pool.acquire() as conn:
            return await conn.fetchrow(
                "SELECT * FROM posts WHERE qr_id = $1", 
                item_id
            )

    async def show_post(self, message: types.Message, post):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ", 
                    url="https://t.me/topofrussia"
                ),
                types.InlineKeyboardButton(
                    text="üì¢ –ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π", 
                    url="https://t.me/TopRussiaBrand"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç", 
                    callback_data=f"next_{post['id']}"
                ),
                types.InlineKeyboardButton(
                    text="üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–µ–µ", 
                    callback_data="search_posts"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="üåü –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", 
                    url="https://–≤–µ—Ä—à–∏–Ω–∞-—Ä–æ—Å—Å–∏–∏.—Ä—Ñ"
                )
            ]
        ])
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ
            await message.answer_photo(
                photo=post['image_url'],
                caption=f"<b>{post['title']}</b>\n\n{post['description']}",
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                f"<b>{post['title']}</b>\n\n{post['description']}\n\nüñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {post['image_url']}",
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )

    async def generate_qr_command(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        admin_id = os.getenv('ADMIN_ID')
        if not admin_id or str(message.from_user.id) != admin_id:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.text.split()
        if len(args) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /qr <qr_id>\n–ü—Ä–∏–º–µ—Ä: /qr p0001")
            return

        qr_id = args[1]
        post = await self.get_post_by_qr_id(qr_id)
        
        if not post:
            await message.answer(f"‚ùå –ü–æ—Å—Ç —Å ID '{qr_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        try:
            filename, qr_link = self.generate_qr({'qr_id': qr_id})
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∫–∞–∫ —Ñ–æ—Ç–æ
            with open(filename, 'rb') as qr_file:
                await message.answer_photo(
                    photo=qr_file,
                    caption=(
                        f"üì± <b>QR-–∫–æ–¥ –¥–ª—è: {post['title']}</b>\n\n"
                        f"üîó –°—Å—ã–ª–∫–∞: <code>{qr_link}</code>\n\n"
                        f"–ü—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ QR-–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ø–∞–¥—É—Ç "
                        f"–ø—Ä—è–º–æ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {post['title']} –≤ –±–æ—Ç–µ."
                    ),
                    parse_mode=ParseMode.HTML
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")

    async def help_command(self, message: Message):
        msg = (
            "üìñ <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É \"–í–µ—Ä—à–∏–Ω—ã –†–æ—Å—Å–∏–∏\"</b>\n\n"
            
            "üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–∞—Ö —á–µ—Ä–µ–∑ QR-–∫–æ–¥—ã\n"
            "‚Ä¢ –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Ç–∞—Ç–µ–π –æ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è—Ö\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ª—é–±–∏—Ç–µ–ª–µ–π –≥–æ—Ä\n\n"
            
            "üì± <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –≥–æ—Ä–∞—Ö\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            
            "üéØ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å QR-–∫–æ–¥–∞–º–∏:</b>\n"
            "1. –ù–∞–π–¥–∏—Ç–µ QR-–∫–æ–¥ —Ä—è–¥–æ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–µ\n"
            "2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —ç—Ç–æ—Ç –±–æ—Ç\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
            
            "üí¨ <b>–°–æ–æ–±—â–µ—Å—Ç–≤–æ:</b>\n"
            "‚Ä¢ –û–±—â–∏–π —á–∞—Ç: https://t.me/topofrussia\n"
            "‚Ä¢ –ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π: https://t.me/TopRussiaBrand\n"
            "‚Ä¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç: https://–≤–µ—Ä—à–∏–Ω–∞-—Ä–æ—Å—Å–∏–∏.—Ä—Ñ\n\n"
            
            "‚ùì <b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b> –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –æ–±—â–µ–º —á–∞—Ç–µ!"
        )
        await message.answer(msg, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
        
    async def show_main_menu(self, message: types.Message):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        await message.answer(
            "üèîÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üí¨ –û–±—â–∏–π —á–∞—Ç", 
                            url="https://t.me/topofrussia"
                        ),
                        types.InlineKeyboardButton(
                            text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", 
                            url="https://t.me/TopRussiaBrand"
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text="üîç –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 
                            callback_data="search_posts"
                        ),
                        types.InlineKeyboardButton(
                            text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", 
                            callback_data="show_news"
                        )
                    ]
                ]
            )
        )
    
    async def text_message_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""        
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
        current_state = await state.get_state()
        if current_state == SearchStates.waiting_for_news_keyword:
            await self.process_news_search_keyword(message, state)
            return
        elif current_state == SearchStates.waiting_for_post_keyword:
            await self.process_post_search_keyword(message, state)
            return

        if message.text.startswith('/'):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç QR-–∫–æ–¥–∞)
        bot_username = os.getenv('BOT_USERNAME', 'vershiny_rossii_bot')
        if f'https://t.me/{bot_username}?start=' in message.text:
            qr_url = message.text.split(f'https://t.me/{bot_username}?start=')[-1]
            decoded_qr_url = unquote(qr_url)
            await self.handle_qr_url(message, decoded_qr_url)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é
            await message.answer(
                "ü§ñ –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å —á–µ—Ä–µ–∑ –º–µ–Ω—é!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                            callback_data="main_menu"
                        )]
                    ]
                )
            )
    
    async def get_news_by_type(self, news_type: str):
        """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É"""
        async with self.db.pool.acquire() as conn:
            return await conn.fetch(
                "SELECT * FROM news WHERE news_type = $1 ORDER BY id DESC", 
                news_type
            )
    
    async def news_command(self, message: Message):
        news_rows = await self.get_all_news()
        if not news_rows:
            await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        news_by_type = {}
        for row in news_rows:
            news_by_type.setdefault(row['news_type'], []).append(row)

        message_parts = ["üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ –≤–µ—Ä—à–∏–Ω–∞—Ö –†–æ—Å—Å–∏–∏:</b>\n"]
        for news_type, news_list in news_by_type.items():
            message_parts.append(f"\nüìÇ <b>{news_type}</b>:")
            for news in news_list[:5]:
                title_to_display = news.get('title', f"–ù–æ–≤–æ—Å—Ç—å #{news['id']}")
                message_parts.append(f"  ‚Ä¢ <a href='{news['link']}'>{title_to_display}</a>")
            if len(news_list) > 5:
                message_parts.append(f"  ... –∏ –µ—â–µ {len(news_list) - 5} –Ω–æ–≤–æ—Å—Ç–µ–π")

        full_message = "\n".join(message_parts)
        for part in self.split_message(full_message, 4000):
            await message.answer(part, disable_web_page_preview=True)

    def split_message(self, text, max_length):
        parts, current_part = [], ""
        for line in text.split('\n'):
            if len(current_part) + len(line) + 1 <= max_length:
                current_part += line + '\n'
            else:
                parts.append(current_part.strip())
                current_part = line + '\n'
        if current_part:
            parts.append(current_part.strip())
        return parts
    
    async def insert_test_data(self):
        async with self.db.pool.acquire() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ—Å—Ç—ã
            if await conn.fetchval("SELECT COUNT(*) FROM posts") == 0:
                await conn.execute('''
                    INSERT INTO posts (qr_id, title, description, image_url)
                    VALUES ($1, $2, $3, $4)
                ''', "p0001", "–ì–æ—Ä–∞ –≠–ª—å–±—Ä—É—Å", "–í—ã—Å–æ—á–∞–π—à–∞—è –≤–µ—Ä—à–∏–Ω–∞ –†–æ—Å—Å–∏–∏ –∏ –ï–≤—Ä–æ–ø—ã (5642 –º)", 
                "https://t.me/TopRussiaBrand/1")
                
                await conn.execute('''
                    INSERT INTO posts (qr_id, title, description, image_url)
                    VALUES ($1, $2, $3, $4)
                ''', "p0002", "–ö–∞–∑–±–µ–∫", "–í—É–ª–∫–∞–Ω –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ì—Ä—É–∑–∏–∏ –∏ –†–æ—Å—Å–∏–∏", 
                "https://t.me/TopRussiaBrand/2")
                
                await conn.execute('''
                    INSERT INTO posts (qr_id, title, description, image_url)
                    VALUES ($1, $2, $3, $4)
                ''', "p0003", "–ë–µ–ª—É—Ö–∞", "–í—ã—Å–æ—á–∞–π—à–∞—è —Ç–æ—á–∫–∞ –ê–ª—Ç–∞–π—Å–∫–∏—Ö –≥–æ—Ä", 
                "https://t.me/TopRussiaBrand/3")
                
                logger.info("–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–æ–≤–æ—Å—Ç–∏
            if await conn.fetchval("SELECT COUNT(*) FROM news") == 0:
                # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                news_samples = [
                        ("https://t.me/TopRussiaBrand/288", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≠–ª—å–±—Ä—É—Å"),
                        ("https://t.me/TopRussiaBrand/289", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã"),
                        ("https://t.me/TopRussiaBrand/290", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–≠–∫—Å–ø–µ–¥–∏—Ü–∏—è 2024"),   
                        ("https://t.me/TopRussiaBrand/292", "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã", "–≠–ª—å–±—Ä—É—Å –≤ –∫—É–ª—å—Ç—É—Ä–µ"),   
                        ("https://t.me/TopRussiaBrand/293", "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã", "–õ–µ–≥–µ–Ω–¥—ã –ö–∞–≤–∫–∞–∑–∞"),   
                        ("https://t.me/TopRussiaBrand/294", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–ü–µ—Ä–≤–æ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª–∏"),   
                        ("https://t.me/TopRussiaBrand/296", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–†–µ–∫–æ—Ä–¥—ã –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π"),   
                        ("https://t.me/TopRussiaBrand/297", "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞", "–§–ª–æ—Ä–∞ –∏ —Ñ–∞—É–Ω–∞"),   
                        ("https://t.me/TopRussiaBrand/298", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–ê–ª—å–ø–∏–Ω–∏–∑–º"),   
                        ("https://t.me/TopRussiaBrand/299", "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞", "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"),   
                        ("https://t.me/TopRussiaBrand/300", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–π —Å–ø–æ—Ä—Ç"),
                        ("https://t.me/TopRussiaBrand/301", "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã", "–ú–∏—Ñ–æ–ª–æ–≥–∏—è –≥–æ—Ä"),
                        ("https://t.me/TopRussiaBrand/302", "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞", "–ö–ª–∏–º–∞—Ç –∏ –ø–æ–≥–æ–¥–∞"),
                        ("https://t.me/TopRussiaBrand/303", "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π", "–ñ–µ–Ω—Å–∫–∏–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—è"),
                        ("https://t.me/TopRussiaBrand/304", "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã", "–§–æ–ª—å–∫–ª–æ—Ä"),
                        ("https://t.me/TopRussiaBrand/305", "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞", "–ì–µ–æ–ª–æ–≥–∏—è"),
                ]

                for link, news_type, title in news_samples:
                    await conn.execute('''
                        INSERT INTO news (link, news_type, title)
                        VALUES ($1, $2, $3)
                    ''', link, news_type, title)
                
                logger.info("–¢–µ—Å—Ç–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    async def callback_handler(self, callback: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        try:
            if callback.data == "main_menu":
                await self.show_main_menu(callback.message)
                await callback.answer()
                
            elif callback.data == "search_posts":
                await callback.message.answer(
                    "üîç <b>–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–∞—Ö</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä—ã –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                    parse_mode=ParseMode.HTML
                )
                await state.set_state(SearchStates.waiting_for_post_keyword)
                await callback.answer()
                
            elif callback.data == "show_news":
                await self.show_news_categories(callback.message)
                await callback.answer()
                
            elif callback.data.startswith("news_category_"):
                category = callback.data.replace("news_category_", "")
                await self.show_news_by_category(callback.message, category)
                await callback.answer()
                
            elif callback.data == "search_news":
                await callback.message.answer(
                    "üîç <b>–ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:",
                    parse_mode=ParseMode.HTML
                )
                await state.set_state(SearchStates.waiting_for_news_keyword)
                await callback.answer()
                
            elif callback.data.startswith("next_"):
                post_id = int(callback.data.replace("next_", ""))
                await self.show_next_post(callback.message, post_id)
                await callback.answer()
                
            else:
                await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def show_news_categories(self, message: types.Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            async with self.db.pool.acquire() as conn:
                categories = await conn.fetch(
                    "SELECT DISTINCT news_type, COUNT(*) as count FROM news GROUP BY news_type ORDER BY count DESC"
                )
            
            if not categories:
                await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            buttons = []
            for category in categories:
                buttons.append([
                    types.InlineKeyboardButton(
                        text=f"üìÇ {category['news_type']} ({category['count']})",
                        callback_data=f"news_category_{category['news_type']}"
                    )
                ])
            
            buttons.append([
                types.InlineKeyboardButton(
                    text="üîç –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π",
                    callback_data="search_news"
                )
            ])
            
            buttons.append([
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ])
            
            markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await message.answer(
                "üì∞ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_news_categories: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–æ–≤–æ—Å—Ç–µ–π.")

    async def show_news_by_category(self, message: types.Message, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            news_list = await self.get_news_by_type(category)
            
            if not news_list:
                await message.answer(f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            msg_parts = [f"üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏: {category}</b>\n"]
            
            for i, news in enumerate(news_list[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                title = news.get('title', f"–ù–æ–≤–æ—Å—Ç—å #{news['id']}")
                msg_parts.append(f"{i}. <a href='{news['link']}'>{title}</a>")
            
            if len(news_list) > 10:
                msg_parts.append(f"\n... –∏ –µ—â–µ {len(news_list) - 10} –Ω–æ–≤–æ—Å—Ç–µ–π")
            
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ",
                        url="https://t.me/topofrussia"
                    ),
                    types.InlineKeyboardButton(
                        text="üì¢ –ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π",
                        url="https://t.me/TopRussiaBrand"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                        callback_data="show_news"
                    ),
                    types.InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ])
            
            full_message = "\n".join(msg_parts)
            await message.answer(
                full_message,
                reply_markup=markup,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_news_by_category: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")

    async def process_news_search_keyword(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º"""
        try:
            keyword = message.text.strip().lower()
            
            async with self.db.pool.acquire() as conn:
                # –ò—â–µ–º –ø–æ title –∏ news_type
                results = await conn.fetch("""
                    SELECT * FROM news 
                    WHERE LOWER(title) LIKE $1 OR LOWER(news_type) LIKE $1
                    ORDER BY id DESC
                    LIMIT 15
                """, f"%{keyword}%")
            
            await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            if not results:
                await message.answer(
                    f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '<b>{message.text}</b>' –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üì∞ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                            callback_data="show_news"
                        )],
                        [types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="main_menu"
                        )]
                    ]),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø—É
            results_by_type = {}
            for result in results:
                news_type = result['news_type']
                if news_type not in results_by_type:
                    results_by_type[news_type] = []
                results_by_type[news_type].append(result)
            
            msg_parts = [f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}':</b>\n"]
            
            for news_type, news_list in results_by_type.items():
                msg_parts.append(f"\nüìÇ <b>{news_type}</b>:")
                for news in news_list[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    title = news.get('title', f"–ù–æ–≤–æ—Å—Ç—å #{news['id']}")
                    msg_parts.append(f"  ‚Ä¢ <a href='{news['link']}'>{title}</a>")
                
                if len(news_list) > 5:
                    msg_parts.append(f"  ... –∏ –µ—â–µ {len(news_list) - 5} –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="üí¨ –û–±—Å—É–¥–∏—Ç—å –≤ —á–∞—Ç–µ",
                        url="https://t.me/topofrussia"
                    ),
                    types.InlineKeyboardButton(
                        text="üì¢ –ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π",
                        url="https://t.me/TopRussiaBrand"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                        callback_data="search_news"
                    ),
                    types.InlineKeyboardButton(
                        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                        callback_data="main_menu"
                    )
                ]
            ])
            
            full_message = "\n".join(msg_parts)
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            for part in self.split_message(full_message, 3500):
                await message.answer(
                    part,
                    reply_markup=markup if part == self.split_message(full_message, 3500)[-1] else None,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_news_search_keyword: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π.")
            await state.clear()

    async def process_post_search_keyword(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø–æ—Å—Ç–∞–º"""
        try:
            keyword = message.text.strip().lower()
            
            async with self.db.pool.acquire() as conn:
                # –ò—â–µ–º –ø–æ title –∏ description
                results = await conn.fetch("""
                    SELECT * FROM posts 
                    WHERE (LOWER(title) LIKE $1 OR LOWER(description) LIKE $1) 
                    AND is_active = TRUE
                    ORDER BY id
                    LIMIT 10
                """, f"%{keyword}%")
            
            await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            if not results:
                await message.answer(
                    f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '<b>{message.text}</b>' –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                            callback_data="search_posts"
                        )],
                        [types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="main_menu"
                        )]
                    ]),
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.log_user_interaction(message.from_user, 'search', qr_id=keyword)
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å—Ä–∞–∑—É
            if len(results) == 1:
                await self.show_post(message, results[0])
                return
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            msg_parts = [f"üîç <b>–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}':</b>\n"]
            
            buttons = []
            for i, post in enumerate(results, 1):
                msg_parts.append(f"{i}. <b>{post['title']}</b>\n   {post['description'][:100]}{'...' if len(post['description']) > 100 else ''}\n")
                
                buttons.append([
                    types.InlineKeyboardButton(
                        text=f"üìç {post['title']}",
                        callback_data=f"show_post_{post['qr_id']}"
                    )
                ])
            
            buttons.append([
                types.InlineKeyboardButton(
                    text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                    callback_data="search_posts"
                ),
                types.InlineKeyboardButton(
                    text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="main_menu"
                )
            ])
            
            markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            
            full_message = "\n".join(msg_parts)
            await message.answer(
                full_message[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                reply_markup=markup,
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_post_search_keyword: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            await state.clear()

    async def show_next_post(self, message: types.Message, current_post_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç"""
        try:
            async with self.db.pool.acquire() as conn:
                next_post = await conn.fetchrow("""
                    SELECT * FROM posts 
                    WHERE id > $1 AND is_active = TRUE 
                    ORDER BY id LIMIT 1
                """, current_post_id)
                
                if not next_post:
                    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                    next_post = await conn.fetchrow("""
                        SELECT * FROM posts 
                        WHERE is_active = TRUE 
                        ORDER BY id LIMIT 1
                    """)
            
            if next_post:
                await self.show_post(message, next_post)
            else:
                await message.answer("üìç –ë–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_next_post: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞.")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not bot_token:
                logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
                raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
            self.bot = Bot(
                token=bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            self.dp = Dispatcher()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await self.setup_database()
            await self.insert_test_data()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.dp.message.register(self.start_command, Command('start'))
            self.dp.message.register(self.help_command, Command('help'))
            self.dp.message.register(self.news_command, Command('news'))
            self.dp.message.register(self.generate_qr_command, Command('qr'))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å—Ä–µ–¥–∏ message handlers)
            self.dp.message.register(self.text_message_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤
            self.dp.callback_query.register(self.callback_handler)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
            try:
                news_handlers.register_handlers(self.dp, self.db)
                logger.info("–ù–æ–≤–æ—Å—Ç–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã: {e}")
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
        finally:
            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if self.bot:
                await self.bot.session.close()
            if self.db:
                await self.db.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())