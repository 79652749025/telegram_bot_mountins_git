import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from urllib.parse import unquote
import asyncpg
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

class TelegramBot:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.db_pool = None
        
    async def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        db_uri = os.getenv('DB_URI')
        if not db_uri:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URI –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            user = os.getenv('DB_USER', 'postgres')
            password = os.getenv('DB_PASSWORD')
            database = os.getenv('DB_NAME', 'vershinyrossii2')
            host = os.getenv('DB_HOST', '127.0.0.1')
            port = os.getenv('DB_PORT', '5433')
            
            if not password:
                raise ValueError("DB_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            
            db_uri = f"postgresql://{user}:{password}@{host}:{port}/{database}"
        
        self.db_pool = await asyncpg.create_pool(db_uri)
        await self.init_tables()
        await self.insert_test_data()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")

    async def init_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.db_pool.acquire() as conn:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å—Ç–æ–≤
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS posts (
                        id SERIAL PRIMARY KEY,
                        qr_id VARCHAR(50) UNIQUE,
                        image_url TEXT NOT NULL,
                        content_url TEXT NOT NULL,
                        title VARCHAR(255) NOT NULL,
                        description TEXT NOT NULL,
                        url VARCHAR(255),
                        code VARCHAR(50),
                        is_active BOOLEAN NOT NULL DEFAULT TRUE,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS news (
                        id SERIAL PRIMARY KEY,
                        qr_id VARCHAR(50) UNIQUE,
                        image_url TEXT,
                        content_url TEXT,
                        link TEXT NOT NULL,
                        news_type TEXT NOT NULL,
                        title VARCHAR(255) DEFAULT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —á–∞—Ç–æ–≤
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS user_chats (
                        user_id BIGINT PRIMARY KEY,
                        chat_id BIGINT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await conn.execute('''
                    CREATE TABLE IF NOT EXISTS usage_stats (
                        id SERIAL PRIMARY KEY,
                        user_id BIGINT,
                        action VARCHAR(100),
                        post_id INTEGER,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')

                logger.info("–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise

    async def log_user_action(self, user_id: int, action: str, post_id: int = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute(
                    "INSERT INTO usage_stats (user_id, action, post_id) VALUES ($1, $2, $3)",
                    user_id, action, post_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    async def save_user_chat(self, user_id: int, chat_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with self.db_pool.acquire() as conn:
                await conn.execute(
                    """INSERT INTO user_chats (user_id, chat_id) 
                       VALUES ($1, $2) 
                       ON CONFLICT (user_id) DO UPDATE SET chat_id = $2""",
                    user_id, chat_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    async def get_all_news(self, news_type=None, limit=50):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É"""
        try:
            async with self.db_pool.acquire() as conn:
                if news_type and news_type != "all":
                    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
                    type_mapping = {
                        "history": "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π",
                        "nature": "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞",
                        "culture": "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã"
                    }
                    filter_type = type_mapping.get(news_type)
                    if filter_type:
                        return await conn.fetch(
                            "SELECT * FROM news WHERE news_type = $1 ORDER BY created_at DESC LIMIT $2", 
                            filter_type, limit
                        )
                
                return await conn.fetch("SELECT * FROM news ORDER BY created_at DESC LIMIT $1", limit)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []

    async def get_post_by_id(self, item_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID"""
        try:
            async with self.db_pool.acquire() as conn:
                return await conn.fetchrow("SELECT * FROM posts WHERE qr_id = $1 AND is_active = TRUE", item_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return None

    async def get_next_post(self, current_post_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            async with self.db_pool.acquire() as conn:
                return await conn.fetchrow(
                    "SELECT * FROM posts WHERE id > $1 AND is_active = TRUE ORDER BY id LIMIT 1", 
                    current_post_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return None

    async def get_previous_post(self, current_post_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            async with self.db_pool.acquire() as conn:
                return await conn.fetchrow(
                    "SELECT * FROM posts WHERE id < $1 AND is_active = TRUE ORDER BY id DESC LIMIT 1", 
                    current_post_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            return None

    def create_main_menu_keyboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üí¨ –û–±—â–∏–π —á–∞—Ç", url="https://t.me/topofrussia"),
                InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/TopRussiaBrand")
            ],
            [
                InlineKeyboardButton(text="üì∞ –ù–æ–≤–æ—Å—Ç–∏", callback_data="show_news"),
                InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤", callback_data="search_posts")
            ],
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
                InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")
            ]
        ])
        return keyboard

    def create_post_keyboard(self, post_id: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—Å—Ç–∞"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_post_{post_id}"),
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_post_{post_id}")
            ],
            [
                InlineKeyboardButton(text="üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/TopRussiaBrand"),
                InlineKeyboardButton(text="üí¨ –û–±—Å—É–¥–∏—Ç—å", url="https://t.me/topofrussia")
            ],
            [
                InlineKeyboardButton(text="üåü –°–∞–π—Ç", url="https://–≤–µ—Ä—à–∏–Ω–∞-—Ä–æ—Å—Å–∏–∏.—Ä—Ñ"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ])
        return keyboard

    def create_news_keyboard(self, current_type="all"):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        keyboard_buttons = [
            [
                InlineKeyboardButton(text="üèîÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π", callback_data="news_type_history"),
                InlineKeyboardButton(text="üåø –ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è", callback_data="news_type_nature")
            ],
            [
                InlineKeyboardButton(text="üèõÔ∏è –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data="news_type_culture"),
                InlineKeyboardButton(text="üìä –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data="news_type_all")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"news_type_{current_type}"),
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]
        ]
        
        return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    async def start_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await self.save_user_chat(message.from_user.id, message.chat.id)
        await self.log_user_action(message.from_user.id, "start_command")
        
        args = message.text.split()
        
        if len(args) > 1:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start
            qr_param = unquote(args[1])
            await self.handle_qr_url(message, qr_param)
        else:
            await self.show_main_menu(message)

    async def show_main_menu(self, message: Message):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        text = (
            "üèîÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç '–í–µ—Ä—à–∏–Ω—ã –†–æ—Å—Å–∏–∏'!</b>\n\n"
            "üîπ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
            "üîπ –ß–∏—Ç–∞–π—Ç–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ –≥–æ—Ä–∞—Ö –†–æ—Å—Å–∏–∏\n"
            "üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ callback
            if hasattr(message, 'message_id'):
                await message.edit_text(
                    text, 
                    reply_markup=self.create_main_menu_keyboard(),
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    text, 
                    reply_markup=self.create_main_menu_keyboard(),
                    parse_mode=ParseMode.HTML
                )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                text, 
                reply_markup=self.create_main_menu_keyboard(),
                parse_mode=ParseMode.HTML
            )

    async def handle_qr_url(self, message: Message, qr_url: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏–∑ QR-–∫–æ–¥–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑ URL
            item_id = qr_url.split('/')[-1].split('.')[0]
            
            post = await self.get_post_by_id(item_id)
            
            if post:
                await self.log_user_action(message.from_user.id, "qr_scan", post['id'])
                await self.show_post(message, post)
            else:
                await message.answer(
                    "üîç –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ —ç—Ç–æ–º—É QR-–∫–æ–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=self.create_main_menu_keyboard()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞: {e}")
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ QR-–∫–æ–¥–∞",
                reply_markup=self.create_main_menu_keyboard()
            )

    async def show_post(self, message: Message, post):
        """–ü–æ–∫–∞–∑ –ø–æ—Å—Ç–∞"""
        try:
            caption = f"<b>{post['title']}</b>\n\n{post['description']}"
            
            if post['url']:
                caption += f"\n\nüîó <a href='{post['url']}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
            
            if post['image_url']:
                await message.answer_photo(
                    photo=post['image_url'],
                    caption=caption,
                    reply_markup=self.create_post_keyboard(post['id']),
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    caption,
                    reply_markup=self.create_post_keyboard(post['id']),
                    parse_mode=ParseMode.HTML
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Å—Ç–∞: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

    async def news_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /news"""
        await self.log_user_action(message.from_user.id, "news_command")
        await self.show_news(message)

    async def show_news(self, message: Message, news_type: str = "all"):
        """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏
            all_news = await self.get_all_news()
            
            if not all_news:
                text = "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                keyboard = self.create_main_menu_keyboard()
            else:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if news_type != "all":
                    type_mapping = {
                        "history": "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π",
                        "nature": "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞",
                        "culture": "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã"
                    }
                    filter_type = type_mapping.get(news_type)
                    if filter_type:
                        filtered_news = [n for n in all_news if n['news_type'] == filter_type]
                        text = await self.format_filtered_news(filtered_news, filter_type)
                    else:
                        text = await self.format_all_news(all_news)
                else:
                    text = await self.format_all_news(all_news)
                
                keyboard = self.create_news_keyboard(news_type)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if hasattr(message, 'edit_text'):
                    await message.edit_text(
                        text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                else:
                    await message.answer(
                        text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
            except Exception:
                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.answer(
                    text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")

    async def format_all_news(self, news_rows):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º"""
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        news_by_type = {}
        for row in news_rows:
            news_type = row['news_type']
            if news_type not in news_by_type:
                news_by_type[news_type] = []
            news_by_type[news_type].append(row)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_parts = ["üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ –æ –≤–µ—Ä—à–∏–Ω–∞—Ö –†–æ—Å—Å–∏–∏:</b>\n"]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        type_order = [
            "–ò—Å—Ç–æ—Ä–∏—è –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–π –∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–π",
            "–ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—ã", 
            "–ü—Ä–∏—Ä–æ–¥–∞ –∏ —ç–∫–æ–ª–æ–≥–∏—è –≠–ª—å–±—Ä—É—Å–∞"
        ]
        
        for news_type in type_order:
            if news_type in news_by_type:
                news_list = news_by_type[news_type]
                message_parts.append(f"\nüìÇ <b>{news_type}</b>:")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
                displayed_count = 0
                for news in news_list[:5]:
                    displayed_count += 1
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
                    post_number = news['link'].split('/')[-1] if '/' in news['link'] else str(news['id'])
                    title = news['title'] if news['title'] else f"–ù–æ–≤–æ—Å—Ç—å #{news['id']}"
                    message_parts.append(f"  ‚Ä¢ <a href='{news['link']}'>{title}</a>")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–æ–≤–æ—Å—Ç–µ–π
                remaining = len(news_list) - displayed_count
                if remaining > 0:
                    message_parts.append(f"  ... –∏ –µ—â–µ {remaining} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        for news_type, news_list in news_by_type.items():
            if news_type not in type_order:
                message_parts.append(f"\nüìÇ <b>{news_type}</b>:")
                for news in news_list[:5]:
                    title = news['title'] if news['title'] else f"–ù–æ–≤–æ—Å—Ç—å #{news['id']}"
                    message_parts.append(f"  ‚Ä¢ <a href='{news['link']}'>{title}</a>")
                
                remaining = len(news_list) - 5
                if remaining > 0:
                    message_parts.append(f"  ... –∏ –µ—â–µ {remaining} –Ω–æ–≤–æ—Å—Ç–µ–π")

        return "\n".join(message_parts)

    async def format_filtered_news(self, news_list, news_type):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        message_parts = [f"üì∞ <b>{news_type}:</b>\n"]
        
        for i, news in enumerate(news_list, 1):
            title = news['title'] if news['title'] else f"–ù–æ–≤–æ—Å—Ç—å #{news['id']}"
            message_parts.append(f"{i}. <a href='{news['link']}'>{title}</a>")
        
        if not news_list:
            message_parts.append("–ù–æ–≤–æ—Å—Ç–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        
        return "\n".join(message_parts)

    async def show_stats(self, message: Message):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
        try:
            async with self.db_pool.acquire() as conn:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_users = await conn.fetchval("SELECT COUNT(DISTINCT user_id) FROM user_chats")
                total_posts = await conn.fetchval("SELECT COUNT(*) FROM posts WHERE is_active = TRUE")
                total_news = await conn.fetchval("SELECT COUNT(*) FROM news")
                total_actions = await conn.fetchval("SELECT COUNT(*) FROM usage_stats")
                
                # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                popular_actions = await conn.fetch("""
                    SELECT action, COUNT(*) as count 
                    FROM usage_stats 
                    GROUP BY action 
                    ORDER BY count DESC 
                    LIMIT 5
                """)
                
                stats_text = (
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ '–í–µ—Ä—à–∏–Ω—ã –†–æ—Å—Å–∏–∏'</b>\n\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
                    f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: <b>{total_posts}</b>\n"
                    f"üì∞ –ù–æ–≤–æ—Å—Ç–µ–π: <b>{total_news}</b>\n"
                    f"üéØ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: <b>{total_actions}</b>\n\n"
                )
                
                if popular_actions:
                    stats_text += "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
                    action_names = {
                        "start_command": "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞",
                        "news_command": "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤–æ—Å—Ç–µ–π",
                        "qr_scan": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR",
                        "show_help": "–°–ø—Ä–∞–≤–∫–∞"
                    }
                    
                    for action in popular_actions:
                        action_name = action_names.get(action['action'], action['action'])
                        stats_text += f"  ‚Ä¢ {action_name}: {action['count']}\n"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                if hasattr(message, 'edit_text'):
                    await message.edit_text(
                        stats_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await message.answer(
                        stats_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.HTML
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def help_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.log_user_action(message.from_user.id, "show_help")
        
        help_text = (
            "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "üîπ <b>/start</b> - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "üîπ <b>/news</b> - –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
            "üîπ <b>/help</b> - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "üîπ <b>/stats</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            "üí° <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "‚Ä¢ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã –Ω–∞ –ø–ª–∞–∫–∞—Ç–∞—Ö\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –≤ –≥—Ä—É–ø–ø–µ\n\n"
            "üì∫ <b>–ù–∞—à –∫–∞–Ω–∞–ª:</b> @TopRussiaBrand\n"
            "üí¨ <b>–û–±—â–∏–π —á–∞—Ç:</b> @topofrussia\n"
            "üåê <b>–°–∞–π—Ç:</b> –≤–µ—Ä—à–∏–Ω–∞-—Ä–æ—Å—Å–∏–∏.—Ä—Ñ"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        try:
            if hasattr(message, 'edit_text'):
                await message.edit_text(
                    help_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
            else:
                await message.answer(
                    help_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.HTML
                )
        except Exception:
            await message.answer(
                help_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
            )

    async def stats_command(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        await self.show_stats(message)

    async def add_news_command(self, message: Message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            parts = message.text.split(maxsplit=3)
            if len(parts) < 3:
                await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addnews —Å—Å—ã–ª–∫–∞ —Ç–∏–ø_–Ω–æ–≤–æ—Å—Ç–∏ [–∑–∞–≥–æ–ª–æ–≤–æ–∫]")
                return
                
            link = parts[1]
            news_type = parts[2]
            title = parts[3] if len(parts) > 3 else None
            
            async with self.db_pool.acquire() as conn:
                await conn.execute(
                    "INSERT INTO news (link, news_type, title) VALUES ($1, $2, $3)",
                    link, news_type, title
                )
            
            await message.answer("‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: {e}")

    async def handle_callback_query(self, callback: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        try:
            data = callback.data
            user_id = callback.from_user.id
            
            if data == "main_menu":
                await self.show_main_menu(callback.message)
                
            elif data == "show_news":
                await self.log_user_action(user_id, "show_news")
                await self.show_news(callback.message)
                
            elif data == "show_help":
                await self.log_user_action(user_id, "show_help")
                await self.help_command(callback.message)
                
            elif data == "show_stats":
                await self.log_user_action(user_id, "show_stats")
                await self.show_stats(callback.message)
                
            elif data.startswith("next_post_"):
                post_id = int(data.split("_")[-1])
                next_post = await self.get_next_post(post_id)
                if next_post:
                    await self.log_user_action(user_id, "next_post", next_post['id'])
                    await self.show_post(callback.message, next_post)
                else:
                    await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç!", show_alert=True)
                    
            elif data.startswith("prev_post_"):
                post_id = int(data.split("_")[-1])
                prev_post = await self.get_previous_post(post_id)
                if prev_post:
                    await self.log_user_action(user_id, "prev_post", prev_post['id'])
                    await self.show_post(callback.message, prev_post)
                else:
                    await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç!", show_alert=True)
                    
            elif data.startswith("news_type_"):
                news_type = data.split("_")[-1]
                await self.log_user_action(user_id, f"news_filter_{news_type}")
                await self.show_news(callback.message, news_type)
                
            elif data == "search_posts":
                search_text = (
                    "üîç <b>–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤</b>\n\n"
                    "–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤:\n"
                    "‚Ä¢ –°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã –Ω–∞ –ø–ª–∞–∫–∞—Ç–∞—Ö\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n"
                    "üì∫ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ @TopRussiaBrand"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url="https://t.me/TopRussiaBrand")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
                
                try:
                    await callback.message.edit_text(
                        search_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.HTML
                    )
                except Exception:
                    await callback.message.answer(
                        search_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.HTML
                    )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
        try:
            await self.setup_database()
            await self.setup_bot()
            
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            await self.dp.start_polling(self.bot)
            
        except asyncio.CancelledError:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.cleanup()

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        if self.bot:
            await self.bot.session.close()
        if self.db_pool:
            await self.db_pool.close()
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == '__main__':
    bot = TelegramBot()
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")